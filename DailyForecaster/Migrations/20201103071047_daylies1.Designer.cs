// <auto-generated />
using System;
using DailyForecaster.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DailyForecaster.Migrations
{
    [DbContext(typeof(FinPlannerContext))]
    [Migration("20201103071047_daylies1")]
    partial class daylies1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DailyForecaster.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AccountLimit")
                        .HasColumnType("float");

                    b.Property<string>("AccountTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Available")
                        .HasColumnType("float");

                    b.Property<string>("CollectionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("CreditRate")
                        .HasColumnType("float");

                    b.Property<double>("DebitRate")
                        .HasColumnType("float");

                    b.Property<bool>("Floating")
                        .HasColumnType("bit");

                    b.Property<string>("FloatingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Maturity")
                        .HasColumnType("datetime2");

                    b.Property<double>("MonthlyFee")
                        .HasColumnType("float");

                    b.Property<double>("MonthlyPayment")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NetAmount")
                        .HasColumnType("float");

                    b.Property<string>("SimulationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Spread")
                        .HasColumnType("float");

                    b.Property<int>("YodleeId")
                        .HasColumnType("int");

                    b.Property<bool>("isDummy")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CollectionsId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("SimulationId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("DailyForecaster.Models.AccountAmortisation", b =>
                {
                    b.Property<string>("AccountAmortisationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountAmortisationId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("AccountAmortisation");
                });

            modelBuilder.Entity("DailyForecaster.Models.AccountBalance", b =>
                {
                    b.Property<string>("AccountBalanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountBalanceId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountBalance");
                });

            modelBuilder.Entity("DailyForecaster.Models.AccountChange", b =>
                {
                    b.Property<string>("AccountChangeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AutomatedCashFlowId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManualCashFlowId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("UpdatedBalance")
                        .HasColumnType("float");

                    b.HasKey("AccountChangeId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AutomatedCashFlowId");

                    b.HasIndex("ManualCashFlowId");

                    b.ToTable("AccountChange");
                });

            modelBuilder.Entity("DailyForecaster.Models.AccountCollectionsMapping", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountCollectionsMapping");
                });

            modelBuilder.Entity("DailyForecaster.Models.AccountState", b =>
                {
                    b.Property<string>("AccountStateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BudgetId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountStateId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BudgetId");

                    b.ToTable("AccountState");
                });

            modelBuilder.Entity("DailyForecaster.Models.AccountType", b =>
                {
                    b.Property<string>("AccountTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Amortised")
                        .HasColumnType("bit");

                    b.Property<bool>("Bank")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Transactional")
                        .HasColumnType("bit");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("DailyForecaster.Models.AppAreas", b =>
                {
                    b.Property<string>("AppAreasId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppAreasId");

                    b.ToTable("AppAreas");
                });

            modelBuilder.Entity("DailyForecaster.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DailyForecaster.Models.AutomatedCashFlow", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("AutomatedCashFlowsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CFClassificationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CFTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateBooked")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCaptured")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceOfExpense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Split")
                        .HasColumnType("bit");

                    b.Property<bool>("Validated")
                        .HasColumnType("bit");

                    b.Property<int>("YodleeId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccountId");

                    b.HasIndex("AutomatedCashFlowsId");

                    b.HasIndex("CFClassificationId");

                    b.HasIndex("CFTypeId");

                    b.ToTable("AutomatedCashFlows");
                });

            modelBuilder.Entity("DailyForecaster.Models.AutomatedLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<bool>("result")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AutomatedLog");
                });

            modelBuilder.Entity("DailyForecaster.Models.Budget", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CollectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Simulation")
                        .HasColumnType("bit");

                    b.Property<string>("SimulationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BudgetId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("SimulationId");

                    b.ToTable("Budget");
                });

            modelBuilder.Entity("DailyForecaster.Models.BudgetTransaction", b =>
                {
                    b.Property<string>("BudgetTransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<bool>("Automated")
                        .HasColumnType("bit");

                    b.Property<string>("BudgetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CFClassificationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CFTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirebaseUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("BudgetTransactionId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("CFClassificationId");

                    b.HasIndex("CFTypeId");

                    b.HasIndex("FirebaseUserId");

                    b.HasIndex("UserId");

                    b.ToTable("BudgetTransactions");
                });

            modelBuilder.Entity("DailyForecaster.Models.CFClassification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sign")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CFClassifications");
                });

            modelBuilder.Entity("DailyForecaster.Models.CFType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Custom")
                        .HasColumnType("bit");

                    b.Property<bool>("Infaltion")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YodleeId")
                        .HasColumnType("int");

                    b.Property<int>("YodleeSGId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CFTypes");
                });

            modelBuilder.Entity("DailyForecaster.Models.ClickTracker", b =>
                {
                    b.Property<string>("ClickTrackerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Firebase")
                        .HasColumnType("bit");

                    b.Property<bool>("GET")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("POST")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RecordDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClickTrackerId");

                    b.ToTable("ClickTracker");
                });

            modelBuilder.Entity("DailyForecaster.Models.CollectionSharing", b =>
                {
                    b.Property<string>("CollectionSharingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CollectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.HasKey("CollectionSharingId");

                    b.ToTable("CollectionSharing");
                });

            modelBuilder.Entity("DailyForecaster.Models.Collections", b =>
                {
                    b.Property<string>("CollectionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DurationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResetDay")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<string>("UserCreated")
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("CollectionsId");

                    b.HasIndex("FirebaseUserId");

                    b.HasIndex("UserCreated");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("DailyForecaster.Models.DailyMotivational", b =>
                {
                    b.Property<string>("DailyMotivationalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DistributionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DailyMotivationalId");

                    b.ToTable("DailyMotivational");
                });

            modelBuilder.Entity("DailyForecaster.Models.DailyTip", b =>
                {
                    b.Property<string>("DailyTipId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DistributionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DailyTipId");

                    b.ToTable("DailyTip");
                });

            modelBuilder.Entity("DailyForecaster.Models.EmailPreferences", b =>
                {
                    b.Property<string>("EmailPreferencesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("DailyCommunication")
                        .HasColumnType("bit");

                    b.Property<string>("FirebaseUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InteractionRecord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastInteraction")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LoginNotification")
                        .HasColumnType("bit");

                    b.HasKey("EmailPreferencesId");

                    b.HasIndex("FirebaseUserId");

                    b.ToTable("EmailPrefernces");
                });

            modelBuilder.Entity("DailyForecaster.Models.EmailRecords", b =>
                {
                    b.Property<string>("EmailRecordsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirebaseUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InteractionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailRecordsId");

                    b.ToTable("EmailRecords");
                });

            modelBuilder.Entity("DailyForecaster.Models.EmailStore", b =>
                {
                    b.Property<string>("EmailStoreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EmailDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailStoreId");

                    b.ToTable("EmailStore");
                });

            modelBuilder.Entity("DailyForecaster.Models.ExceptionCatcher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExceptionCatcher");
                });

            modelBuilder.Entity("DailyForecaster.Models.ExpenseModel", b =>
                {
                    b.Property<string>("ExpenseModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlobLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManualCashFlowId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RetailBranchesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("ExpenseModelId");

                    b.HasIndex("ManualCashFlowId");

                    b.HasIndex("RetailBranchesId");

                    b.ToTable("ExpenseModels");
                });

            modelBuilder.Entity("DailyForecaster.Models.FirebaseLogin", b =>
                {
                    b.Property<string>("FirebaseLoginId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirebaseUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FirebaseLoginId");

                    b.HasIndex("FirebaseUserId");

                    b.ToTable("FirebaseLogin");
                });

            modelBuilder.Entity("DailyForecaster.Models.FirebaseUser", b =>
                {
                    b.Property<string>("FirebaseUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FirebaseUserId");

                    b.ToTable("FirebaseUser");
                });

            modelBuilder.Entity("DailyForecaster.Models.Institution", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlobString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<string>("WebLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDummy")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Institution");
                });

            modelBuilder.Entity("DailyForecaster.Models.ItemisedProducts", b =>
                {
                    b.Property<string>("ItemisedProductsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ExpenseModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("NumberOfProducts")
                        .HasColumnType("float");

                    b.Property<string>("ProductsModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Savings")
                        .HasColumnType("float");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.HasKey("ItemisedProductsId");

                    b.HasIndex("ExpenseModelId");

                    b.HasIndex("ProductsModelId");

                    b.ToTable("ItemisedProducts");
                });

            modelBuilder.Entity("DailyForecaster.Models.LogoffModel", b =>
                {
                    b.Property<string>("LogoffModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirebaseUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LogoffModelId");

                    b.HasIndex("FirebaseUserId");

                    b.ToTable("LogoffModel");
                });

            modelBuilder.Entity("DailyForecaster.Models.ManualCashFlow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("AutomatedCashFlowId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CFClassificationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CFTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateBooked")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCaptured")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Expected")
                        .HasColumnType("bit");

                    b.Property<string>("ExpenseLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoBlobLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceOfExpense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AutomatedCashFlowId")
                        .IsUnique()
                        .HasFilter("[AutomatedCashFlowId] IS NOT NULL");

                    b.HasIndex("CFClassificationId");

                    b.HasIndex("CFTypeId");

                    b.ToTable("ManualCashFlows");
                });

            modelBuilder.Entity("DailyForecaster.Models.MonthlyAmortisation", b =>
                {
                    b.Property<string>("MonthlyAmortisationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountAmortisationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Additional")
                        .HasColumnType("float");

                    b.Property<double>("Capital")
                        .HasColumnType("float");

                    b.Property<double>("Close")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Interest")
                        .HasColumnType("float");

                    b.Property<double>("Open")
                        .HasColumnType("float");

                    b.Property<double>("Payment")
                        .HasColumnType("float");

                    b.HasKey("MonthlyAmortisationId");

                    b.HasIndex("AccountAmortisationId");

                    b.ToTable("MonthlyAmortisation");
                });

            modelBuilder.Entity("DailyForecaster.Models.Notes", b =>
                {
                    b.Property<string>("NotesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BudgetTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotesId");

                    b.HasIndex("BudgetTransactionId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("DailyForecaster.Models.PaymentModel", b =>
                {
                    b.Property<string>("PaymentModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountAmortisationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("AdditionalLoan")
                        .HasColumnType("float");

                    b.Property<double>("CostOfLoan")
                        .HasColumnType("float");

                    b.Property<double>("LoanInstallment")
                        .HasColumnType("float");

                    b.Property<double>("NonLoanPortion")
                        .HasColumnType("float");

                    b.Property<double>("TotalPayable")
                        .HasColumnType("float");

                    b.HasKey("PaymentModelId");

                    b.HasIndex("AccountAmortisationId")
                        .IsUnique()
                        .HasFilter("[AccountAmortisationId] IS NOT NULL");

                    b.ToTable("PaymentModel");
                });

            modelBuilder.Entity("DailyForecaster.Models.ProductClassModel", b =>
                {
                    b.Property<string>("ProductClassModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CFTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuperClass")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductClassModelId");

                    b.HasIndex("CFTypeId");

                    b.ToTable("ProductClassModel");
                });

            modelBuilder.Entity("DailyForecaster.Models.ProductsModel", b =>
                {
                    b.Property<string>("ProductsModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductClassModelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductsModelId");

                    b.HasIndex("ProductClassModelId");

                    b.ToTable("ProductsModel");
                });

            modelBuilder.Entity("DailyForecaster.Models.RateInformation", b =>
                {
                    b.Property<string>("RateInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEffective")
                        .HasColumnType("datetime2");

                    b.Property<double>("JIBAR_3_Month")
                        .HasColumnType("float");

                    b.Property<double>("PrimeRate")
                        .HasColumnType("float");

                    b.Property<double>("RepoRate")
                        .HasColumnType("float");

                    b.HasKey("RateInformationId");

                    b.ToTable("RateInformation");
                });

            modelBuilder.Entity("DailyForecaster.Models.ReportedTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("AutomatedCashFlowID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CFClassificationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CFTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateBooked")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCaptured")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManualCashFlowId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceOfExpense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Validated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AutomatedCashFlowID");

                    b.HasIndex("CFClassificationId");

                    b.HasIndex("CFTypeId");

                    b.HasIndex("ManualCashFlowId");

                    b.ToTable("ReportedTransaction");
                });

            modelBuilder.Entity("DailyForecaster.Models.RetailBranches", b =>
                {
                    b.Property<string>("RetailBranchesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("RetailMerchantsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShopNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RetailBranchesId");

                    b.HasIndex("RetailMerchantsId");

                    b.ToTable("RetailBranches");
                });

            modelBuilder.Entity("DailyForecaster.Models.RetailMerchants", b =>
                {
                    b.Property<string>("RetailMerchantsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RetailMerchantsId");

                    b.ToTable("RetailMerchants");
                });

            modelBuilder.Entity("DailyForecaster.Models.Simulation", b =>
                {
                    b.Property<string>("SimulationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CollectionsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SimulationAssumptionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SimulationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SimulationId");

                    b.HasIndex("CollectionsId");

                    b.HasIndex("SimulationAssumptionsId")
                        .IsUnique()
                        .HasFilter("[SimulationAssumptionsId] IS NOT NULL");

                    b.ToTable("Simulation");
                });

            modelBuilder.Entity("DailyForecaster.Models.SimulationAssumptions", b =>
                {
                    b.Property<string>("SimulationAssumptionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<bool>("Bonus")
                        .HasColumnType("bit");

                    b.Property<double>("BonusAmount")
                        .HasColumnType("float");

                    b.Property<int>("BonusMonth")
                        .HasColumnType("int");

                    b.Property<string>("CFClassificationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CFTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Increase")
                        .HasColumnType("bit");

                    b.Property<int>("IncreaseMonth")
                        .HasColumnType("int");

                    b.Property<double>("IncreasePercentage")
                        .HasColumnType("float");

                    b.Property<int>("NumberOfMonths")
                        .HasColumnType("int");

                    b.Property<bool>("Recurring")
                        .HasColumnType("bit");

                    b.Property<string>("SimualtionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SimulationAssumptionsId");

                    b.HasIndex("CFClassificationId");

                    b.HasIndex("CFTypeId");

                    b.ToTable("SimulationAssumptions");
                });

            modelBuilder.Entity("DailyForecaster.Models.SplitTransactions", b =>
                {
                    b.Property<string>("SplitTransactionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("AutomatedCashFlowId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CFTYpeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SplitTransactionsId");

                    b.HasIndex("AutomatedCashFlowId");

                    b.HasIndex("CFTYpeID");

                    b.ToTable("SplitTransactions");
                });

            modelBuilder.Entity("DailyForecaster.Models.UserCollectionMapping", b =>
                {
                    b.Property<string>("UserCollectionMappingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CollectionsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirebaseUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("UserCollectionMappingId");

                    b.HasIndex("CollectionsId");

                    b.HasIndex("FirebaseUserId");

                    b.HasIndex("Id");

                    b.ToTable("UserCollectionMapping");
                });

            modelBuilder.Entity("DailyForecaster.Models.UserInteraction", b =>
                {
                    b.Property<string>("UserInteractionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppAreasId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreaObejctId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirebaseUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserInteractionId");

                    b.HasIndex("AppAreasId");

                    b.HasIndex("FirebaseUserId");

                    b.ToTable("UserInteraction");
                });

            modelBuilder.Entity("DailyForecaster.Models.YodleeModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CollectionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("loginName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionsId");

                    b.ToTable("YodleeModel");
                });

            modelBuilder.Entity("DailyForecaster.Models.Account", b =>
                {
                    b.HasOne("DailyForecaster.Models.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId");

                    b.HasOne("DailyForecaster.Models.Collections", "Collections")
                        .WithMany("Accounts")
                        .HasForeignKey("CollectionsId");

                    b.HasOne("DailyForecaster.Models.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.Simulation", "Simulation")
                        .WithMany()
                        .HasForeignKey("SimulationId");
                });

            modelBuilder.Entity("DailyForecaster.Models.AccountAmortisation", b =>
                {
                    b.HasOne("DailyForecaster.Models.Account", "Account")
                        .WithOne("AccountAmortisation")
                        .HasForeignKey("DailyForecaster.Models.AccountAmortisation", "AccountId");
                });

            modelBuilder.Entity("DailyForecaster.Models.AccountBalance", b =>
                {
                    b.HasOne("DailyForecaster.Models.Account", "Account")
                        .WithMany("AccountBalances")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("DailyForecaster.Models.AccountChange", b =>
                {
                    b.HasOne("DailyForecaster.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("DailyForecaster.Models.AutomatedCashFlow", "AutomatedCashFlow")
                        .WithMany()
                        .HasForeignKey("AutomatedCashFlowId");

                    b.HasOne("DailyForecaster.Models.ManualCashFlow", "ManualCashFlow")
                        .WithMany()
                        .HasForeignKey("ManualCashFlowId");
                });

            modelBuilder.Entity("DailyForecaster.Models.AccountState", b =>
                {
                    b.HasOne("DailyForecaster.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("DailyForecaster.Models.Budget", "Budget")
                        .WithMany("AccountStates")
                        .HasForeignKey("BudgetId");
                });

            modelBuilder.Entity("DailyForecaster.Models.AutomatedCashFlow", b =>
                {
                    b.HasOne("DailyForecaster.Models.Account", "Account")
                        .WithMany("AutomatedCashFlows")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.AutomatedCashFlow", "EmbededAutomatedCashFlow")
                        .WithMany()
                        .HasForeignKey("AutomatedCashFlowsId");

                    b.HasOne("DailyForecaster.Models.CFClassification", "CFClassification")
                        .WithMany()
                        .HasForeignKey("CFClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.CFType", "CFType")
                        .WithMany()
                        .HasForeignKey("CFTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyForecaster.Models.Budget", b =>
                {
                    b.HasOne("DailyForecaster.Models.Collections", "Collection")
                        .WithMany("Budgets")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.Simulation", null)
                        .WithMany("Budgets")
                        .HasForeignKey("SimulationId");
                });

            modelBuilder.Entity("DailyForecaster.Models.BudgetTransaction", b =>
                {
                    b.HasOne("DailyForecaster.Models.Budget", "Budget")
                        .WithMany("BudgetTransactions")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.CFClassification", "CFClassification")
                        .WithMany("BudgetTransactions")
                        .HasForeignKey("CFClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.CFType", "CFType")
                        .WithMany("BudgetTransactions")
                        .HasForeignKey("CFTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.FirebaseUser", "FirebaseUser")
                        .WithMany("BudgetTransactions")
                        .HasForeignKey("FirebaseUserId");

                    b.HasOne("DailyForecaster.Models.AspNetUsers", "AspNetUsers")
                        .WithMany("BudgetTransactions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DailyForecaster.Models.Collections", b =>
                {
                    b.HasOne("DailyForecaster.Models.FirebaseUser", null)
                        .WithMany("Collections")
                        .HasForeignKey("FirebaseUserId");

                    b.HasOne("DailyForecaster.Models.AspNetUsers", "AspNetUsers")
                        .WithMany("Collections")
                        .HasForeignKey("UserCreated");
                });

            modelBuilder.Entity("DailyForecaster.Models.EmailPreferences", b =>
                {
                    b.HasOne("DailyForecaster.Models.FirebaseUser", "FirebaseUser")
                        .WithMany()
                        .HasForeignKey("FirebaseUserId");
                });

            modelBuilder.Entity("DailyForecaster.Models.ExpenseModel", b =>
                {
                    b.HasOne("DailyForecaster.Models.ManualCashFlow", "ManualCashFlow")
                        .WithMany()
                        .HasForeignKey("ManualCashFlowId");

                    b.HasOne("DailyForecaster.Models.RetailBranches", "RetailBranches")
                        .WithMany()
                        .HasForeignKey("RetailBranchesId");
                });

            modelBuilder.Entity("DailyForecaster.Models.FirebaseLogin", b =>
                {
                    b.HasOne("DailyForecaster.Models.FirebaseUser", "FirebaseUser")
                        .WithMany("FirebaseLogins")
                        .HasForeignKey("FirebaseUserId");
                });

            modelBuilder.Entity("DailyForecaster.Models.ItemisedProducts", b =>
                {
                    b.HasOne("DailyForecaster.Models.ExpenseModel", "ExpenseModel")
                        .WithMany("ItemisedProducts")
                        .HasForeignKey("ExpenseModelId");

                    b.HasOne("DailyForecaster.Models.ProductsModel", "ProductsModel")
                        .WithMany()
                        .HasForeignKey("ProductsModelId");
                });

            modelBuilder.Entity("DailyForecaster.Models.LogoffModel", b =>
                {
                    b.HasOne("DailyForecaster.Models.FirebaseUser", "FirebaseUser")
                        .WithMany()
                        .HasForeignKey("FirebaseUserId");
                });

            modelBuilder.Entity("DailyForecaster.Models.ManualCashFlow", b =>
                {
                    b.HasOne("DailyForecaster.Models.Account", "Account")
                        .WithMany("ManualCashFlows")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.AutomatedCashFlow", "AutomatedCashFlow")
                        .WithOne("ManualCashFlow")
                        .HasForeignKey("DailyForecaster.Models.ManualCashFlow", "AutomatedCashFlowId");

                    b.HasOne("DailyForecaster.Models.CFClassification", "CFClassification")
                        .WithMany("ManualCashFlows")
                        .HasForeignKey("CFClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.CFType", "CFType")
                        .WithMany()
                        .HasForeignKey("CFTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyForecaster.Models.MonthlyAmortisation", b =>
                {
                    b.HasOne("DailyForecaster.Models.AccountAmortisation", "AccountAmortisation")
                        .WithMany("MonthlyAmortisations")
                        .HasForeignKey("AccountAmortisationId");
                });

            modelBuilder.Entity("DailyForecaster.Models.Notes", b =>
                {
                    b.HasOne("DailyForecaster.Models.BudgetTransaction", "BudgetTransaction")
                        .WithMany("Notes")
                        .HasForeignKey("BudgetTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyForecaster.Models.PaymentModel", b =>
                {
                    b.HasOne("DailyForecaster.Models.AccountAmortisation", "AccountAmortisation")
                        .WithOne("PaymentModel")
                        .HasForeignKey("DailyForecaster.Models.PaymentModel", "AccountAmortisationId");
                });

            modelBuilder.Entity("DailyForecaster.Models.ProductClassModel", b =>
                {
                    b.HasOne("DailyForecaster.Models.CFType", "CFType")
                        .WithMany()
                        .HasForeignKey("CFTypeId");
                });

            modelBuilder.Entity("DailyForecaster.Models.ProductsModel", b =>
                {
                    b.HasOne("DailyForecaster.Models.ProductClassModel", "ProductClassModel")
                        .WithMany()
                        .HasForeignKey("ProductClassModelId");
                });

            modelBuilder.Entity("DailyForecaster.Models.ReportedTransaction", b =>
                {
                    b.HasOne("DailyForecaster.Models.Account", "Account")
                        .WithMany("ReportedTransactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.AutomatedCashFlow", "AutomatedCashFlow")
                        .WithMany()
                        .HasForeignKey("AutomatedCashFlowID");

                    b.HasOne("DailyForecaster.Models.CFClassification", "CFClassification")
                        .WithMany()
                        .HasForeignKey("CFClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.CFType", "CFType")
                        .WithMany()
                        .HasForeignKey("CFTypeId");

                    b.HasOne("DailyForecaster.Models.ManualCashFlow", "ManualCashFlow")
                        .WithMany()
                        .HasForeignKey("ManualCashFlowId");
                });

            modelBuilder.Entity("DailyForecaster.Models.RetailBranches", b =>
                {
                    b.HasOne("DailyForecaster.Models.RetailMerchants", "RetailMerchants")
                        .WithMany()
                        .HasForeignKey("RetailMerchantsId");
                });

            modelBuilder.Entity("DailyForecaster.Models.Simulation", b =>
                {
                    b.HasOne("DailyForecaster.Models.Collections", "Collections")
                        .WithMany("Simualtions")
                        .HasForeignKey("CollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.SimulationAssumptions", "SimulationAssumptions")
                        .WithOne("Simulation")
                        .HasForeignKey("DailyForecaster.Models.Simulation", "SimulationAssumptionsId");
                });

            modelBuilder.Entity("DailyForecaster.Models.SimulationAssumptions", b =>
                {
                    b.HasOne("DailyForecaster.Models.CFClassification", "CFClassification")
                        .WithMany()
                        .HasForeignKey("CFClassificationId");

                    b.HasOne("DailyForecaster.Models.CFType", "CFType")
                        .WithMany()
                        .HasForeignKey("CFTypeId");
                });

            modelBuilder.Entity("DailyForecaster.Models.SplitTransactions", b =>
                {
                    b.HasOne("DailyForecaster.Models.AutomatedCashFlow", "AutomatedCashFlow")
                        .WithMany()
                        .HasForeignKey("AutomatedCashFlowId");

                    b.HasOne("DailyForecaster.Models.CFType", "CFType")
                        .WithMany()
                        .HasForeignKey("CFTYpeID");
                });

            modelBuilder.Entity("DailyForecaster.Models.UserCollectionMapping", b =>
                {
                    b.HasOne("DailyForecaster.Models.Collections", "Collections")
                        .WithMany("UserCollectionMappings")
                        .HasForeignKey("CollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.FirebaseUser", "FirebaseUser")
                        .WithMany("UserCollectionMappings")
                        .HasForeignKey("FirebaseUserId");

                    b.HasOne("DailyForecaster.Models.AspNetUsers", "AspNetUsers")
                        .WithMany("UserCollectionMappings")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyForecaster.Models.UserInteraction", b =>
                {
                    b.HasOne("DailyForecaster.Models.AppAreas", "AppAreas")
                        .WithMany()
                        .HasForeignKey("AppAreasId");

                    b.HasOne("DailyForecaster.Models.FirebaseUser", "FirebaseUser")
                        .WithMany()
                        .HasForeignKey("FirebaseUserId");
                });

            modelBuilder.Entity("DailyForecaster.Models.YodleeModel", b =>
                {
                    b.HasOne("DailyForecaster.Models.Collections", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionsId");
                });
#pragma warning restore 612, 618
        }
    }
}
