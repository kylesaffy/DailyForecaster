// <auto-generated />
using System;
using DailyForecaster.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DailyForecaster.Migrations
{
    [DbContext(typeof(FinPlannerContext))]
    partial class FinPlannerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DailyForecaster.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("AccountLimit")
                        .HasColumnType("float");

                    b.Property<double>("Available")
                        .HasColumnType("float");

                    b.Property<string>("CollectionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstitutionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NetAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CollectionsId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("DailyForecaster.Models.AccountCollectionsMapping", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountCollectionsMapping");
                });

            modelBuilder.Entity("DailyForecaster.Models.AutomatedCashFlow", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CFClassificationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CFTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateBooked")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCaptured")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManualCashFlowId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceOfExpense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CFClassificationId");

                    b.HasIndex("CFTypeId");

                    b.HasIndex("ManualCashFlowId");

                    b.ToTable("AutomatedCashFlows");
                });

            modelBuilder.Entity("DailyForecaster.Models.Budget", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CollectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDFate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BudgetId");

                    b.ToTable("Budget");
                });

            modelBuilder.Entity("DailyForecaster.Models.CFClassification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sign")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CFClassifications");
                });

            modelBuilder.Entity("DailyForecaster.Models.CFType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Custom")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CFTypes");
                });

            modelBuilder.Entity("DailyForecaster.Models.Collections", b =>
                {
                    b.Property<string>("CollectionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("CollectionsId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("DailyForecaster.Models.Institution", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlobString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Institution");
                });

            modelBuilder.Entity("DailyForecaster.Models.ManualCashFlow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CFClassificationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CFTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateBooked")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCaptured")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Expected")
                        .HasColumnType("bit");

                    b.Property<string>("ExpenseLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoBlobLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceOfExpense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CFClassificationId");

                    b.HasIndex("CFTypeId");

                    b.ToTable("ManualCashFlows");
                });

            modelBuilder.Entity("DailyForecaster.Models.UserCollectionMapping", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CollectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserCollectionMapping");
                });

            modelBuilder.Entity("DailyForecaster.Models.Account", b =>
                {
                    b.HasOne("DailyForecaster.Models.Collections", null)
                        .WithMany("Accounts")
                        .HasForeignKey("CollectionsId");

                    b.HasOne("DailyForecaster.Models.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyForecaster.Models.AutomatedCashFlow", b =>
                {
                    b.HasOne("DailyForecaster.Models.CFClassification", "CFClassification")
                        .WithMany()
                        .HasForeignKey("CFClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.CFType", "CFType")
                        .WithMany()
                        .HasForeignKey("CFTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.ManualCashFlow", "ManualCashFlow")
                        .WithMany()
                        .HasForeignKey("ManualCashFlowId");
                });

            modelBuilder.Entity("DailyForecaster.Models.ManualCashFlow", b =>
                {
                    b.HasOne("DailyForecaster.Models.CFClassification", "CFClassification")
                        .WithMany()
                        .HasForeignKey("CFClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyForecaster.Models.CFType", "CFType")
                        .WithMany()
                        .HasForeignKey("CFTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
